---
title: "Functions"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Information

This script contains functions that have been used throughout the analyses for the thesis. There is no other documentation available.

## Data processing functions

### No change in LTPA

#### HUNT 1

##### Quasi-continous PA variable (min/week)

```{r}

process_hunt_1 <- function(dataframe) {
  dataframe <- dataframe |> 
    mutate(
      exe_du_nt1blq2 = case_when(
        exe_du_nt1blq2 == "Mindre enn 15 minutter" ~ 7.5,
        exe_du_nt1blq2 == "16-30 minutter" ~ 22.5,
        exe_du_nt1blq2 == "30 minutter-1 time" ~ 45,
        exe_du_nt1blq2 == "Mer enn 1 time" ~ 75,
        TRUE ~ 0
      ),
      exe_f_nt1blq2 = case_when(
        exe_f_nt1blq2 == "En gang i uka" ~ 1,
        exe_f_nt1blq2 == "2-3 ganger i uka" ~ 2.5,
        exe_f_nt1blq2 == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      part_dat_nt1blq1 = case_when(
        is.na(part_dat_nt1blq1) ~ as_date("1984-02-15"),
        TRUE ~ part_dat_nt1blq1
      ),
      ltpa_min_per_week = exe_du_nt1blq2 * exe_f_nt1blq2,
      follow_up_time = as.period(interval(part_dat_nt1blq1, end_date_death)) / years(1),
      death_all = as.numeric(death_all)
    ) |>
    select(
      age,
      sex,
      part_dat_nt1blq1,
      end_date_death,
      follow_up_time,
      death_all,
      bp_syst2_nt1blm,
      bmi_nt1blm,
      alc_fl2w_nt1blq2,
      smo_stat_nt1blq2,
      educ_nt1blq2,
      exe_du_nt1blq2,
      exe_f_nt1blq2,
      ltpa_min_per_week
    )
  return(dataframe)
}
```

#### HUNT 2

##### Quasi-continous PA variable (min/week)

```{r}

process_hunt_2 <- function(dataframe) {
  dataframe <- dataframe |> 
    mutate(
      part_dat_nt2blq1 = case_when(
        is.na(part_dat_nt2blq1) ~ as_date("1995-08-15"),
        TRUE ~ part_dat_nt2blq1
        ),
      exe_lig_du_ly_nt2blq1 = case_when(
       exe_lig_du_ly_nt2blq1 == "Ingen" ~ 0,
       exe_lig_du_ly_nt2blq1 == "Under 1 time" ~ 30,
       exe_lig_du_ly_nt2blq1 == "1-2 timer" ~ 90,
       exe_lig_du_ly_nt2blq1 == "3 timer eller mer" ~ 210,
       TRUE ~ 0),
      exe_har_du_ly_nt2blq1 = case_when(
       exe_har_du_ly_nt2blq1 == "Ingen" ~ 0,
       exe_har_du_ly_nt2blq1 == "Under 1 time" ~ 30,
       exe_har_du_ly_nt2blq1 == "1-2 timer" ~ 90,
       exe_har_du_ly_nt2blq1 == "3 timer eller mer" ~ 210,
       TRUE ~ 0),
      ltpa_min_per_week = exe_lig_du_ly_nt2blq1 + exe_har_du_ly_nt2blq1,
      follow_up_time = as.period(interval(part_dat_nt2blq1, end_date_death)) / years(1),
      death_all = as.numeric(death_all)
    ) |> 
    select(
      age,
      sex,
      part_dat_nt2blq1,
      end_date_death,
      follow_up_time,
      death_all,
      bp_syst_mn23_nt2blm,
      bmi_nt2blm,
      alc_tot_unit_w_nt2blq1,
      smo_stat_nt2blq1,
      educ_nt2blq1,
      exe_lig_du_ly_nt2blq1,
      exe_har_du_ly_nt2blq1,
      ltpa_min_per_week
    )
  return(dataframe)
}
```

#### HUNT 3

##### Quasi-continuous PA variable (min/week)

```{r}

process_hunt_3 <- function(dataframe) {
  dataframe <- dataframe |> 
    mutate(
      exe_du_nt3blq1 = case_when(
        exe_du_nt3blq1 == "Mindre enn 15 minutter" ~ 7.5,
        exe_du_nt3blq1 == "15-29 minutter" ~ 22.5,
        exe_du_nt3blq1 == "30 minutter - 1 time" ~ 45,
        exe_du_nt3blq1 == "Mer enn 1 time" ~ 75,
        TRUE ~ 0
      ),
      exe_f_nt3blq1 = case_when(
        exe_f_nt3blq1 == "En gang i uka" ~ 1,
        exe_f_nt3blq1 == "2-3 ganger i uka" ~ 2.5,
        exe_f_nt3blq1 == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      part_dat_nt3blq1 = case_when(
        is.na(part_dat_nt3blq1) ~ as_date("2006-10-15"),
        TRUE ~ part_dat_nt3blq1
      ),
      ltpa_min_per_week = exe_du_nt3blq1 * exe_f_nt3blq1,
      follow_up_time = as.period(interval(part_dat_nt3blq1, end_date_death)) / years(1),
      death_all = as.numeric(death_all)
    ) |> 
    select(
      age,
      sex,
      part_dat_nt3blq1,
      end_date_death,
      follow_up_time,
      death_all,
      bp_syst_mn23_nt3blm,
      bmi_nt3blm,
      alc_tot_unit_w_nt3blq1,
      smo_stat_nt3blq1,
      wor_tit_isco1_nt3bli,
      exe_du_nt3blq1,
      exe_f_nt3blq1,
      ltpa_min_per_week,
    )
  return(dataframe)
}
```

#### HUNT 4

#### Quasi-continous PA variable (min/week)

```{r}

process_hunt_4 <- function(dataframe) {
  dataframe <- dataframe |>
    mutate(
      exe_du_nt4blq1 = case_when(
        exe_du_nt4blq1 == "Mindre enn 15 minutter" ~ 7.5,
        exe_du_nt4blq1 == "15-29 minutter" ~ 22.5,
        exe_du_nt4blq1 == "30-60 minutter" ~ 45,
        exe_du_nt4blq1 == "Mer enn 60 minutter" ~ 75,
        TRUE ~ 0
      ),
      exe_f_nt4blq1 = case_when(
        exe_f_nt4blq1 == "En gang i uka" ~ 1,
        exe_f_nt4blq1 == "2-3 ganger i uka" ~ 2.5,
        exe_f_nt4blq1 == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      part_dat_nt4blq1 = case_when(
        is.na(part_dat_nt4blq1) ~ as_date("2017-05-15"),
        TRUE ~ part_dat_nt4blq1
      ),
      ltpa_min_per_week = exe_du_nt4blq1 * exe_f_nt4blq1,
      follow_up_time = as.period(interval(part_dat_nt4blq1, end_date_death)) / years(1),
      death_all = as.numeric(death_all)
    ) |> 
    select(
      age,
      sex,
      part_dat_nt4blq1,
      end_date_death,
      follow_up_time,
      death_all,
      bp_syst_mn23_nt4blm,
      bmi_nt4blm,
      alc_tot_unit_w_nt4blq1,
      smo_stat_nt4blq1,
      educ_nt4blq1,
      exe_du_nt4blq1,
      exe_f_nt4blq1,
      ltpa_min_per_week
    )
  return(dataframe)
}
```

### Change in LTPA

There is one data processing function related to each analyses, that is:

1. H1-H3
2. H1-H3-H4
3. H3-H4

#### H1-H3

```{r}

process_hunt_1_3 <- function(dataframe) {
  dataframe <- dataframe |> 
    mutate(
      part_dat_nt1blq1 = case_when(
        is.na(part_dat_nt1blq1) ~ as_date("1984-02-15"),
        TRUE ~ part_dat_nt1blq1
      ),
      follow_up_time = as.period(interval(part_dat_nt1blq1, end_date_death)) / years(1),
      death_all = as.numeric(death_all),
      sex = as_factor(sex),
      bp_syst2_nt1blm = as_factor(bp_syst2_nt1blm),
      alc_fl2w_nt1blq2 = as_factor(alc_fl2w_nt1blq2),
      smo_stat_nt1blq2 = as_factor(smo_stat_nt1blq2),
      educ_nt1blq2 = as_factor(educ_nt1blq2),
      ltpa_index_nt1 = as_factor(ltpa_index_nt1),
      ltpa_group_nt1 = as_factor(ltpa_group_nt1),
      ltpa_index_nt3 = as_factor(ltpa_index_nt3),
      ltpa_group_nt3 = as_factor(ltpa_group_nt3),
      trajectory_group = as_factor(case_when(
        ltpa_group_nt1 == "Low" & ltpa_group_nt3 == "Low" ~ "Below recommended, below recommended",
        ltpa_group_nt1 == "Low" & ltpa_group_nt3 == "Moderate/high" ~ "Below recommended, Recommended",
        ltpa_group_nt1 == "Moderate/high" & ltpa_group_nt3 == "Low" ~ "Recommended, Below recommended",
        ltpa_group_nt1 == "Moderate/high" & ltpa_group_nt3 == "Moderate/high" ~ "Recommended, recommended")
    ),
    trajectory_group = relevel(trajectory_group, ref = "Below recommended, below recommended") # Set reference level for the Cox analyses
  ) |>
    select(
      age,
      sex,
      part_dat_nt1blq1,
      end_date_death,
      follow_up_time,
      death_all,
      bp_syst2_nt1blm,
      bmi_nt1blm,
      alc_fl2w_nt1blq2,
      smo_stat_nt1blq2,
      educ_nt1blq2,
      ltpa_index_nt1,
      ltpa_group_nt1,
      ltpa_index_nt3,
      ltpa_group_nt3,
      trajectory_group
    )
  return(dataframe)
}
```

#### H1-H3-H4

```{r}

process_hunt_1_3_4 <- function(dataframe) {
  dataframe <- dataframe |> 
    mutate(
      part_dat_nt1blq1 = case_when(
      is.na(part_dat_nt1blq1) ~ as_date("1984-02-15"),
      TRUE ~ part_dat_nt1blq1
      ),
      follow_up_time = as.period(interval(part_dat_nt1blq1, end_date_death)) / years(1),
      death_all = as.numeric(death_all),
      sex = as_factor(sex),
      bp_syst2_nt1blm = as_factor(bp_syst2_nt1blm),
      alc_fl2w_nt1blq2 = as_factor(alc_fl2w_nt1blq2),
      smo_stat_nt1blq2 = as_factor(smo_stat_nt1blq2),
      educ_nt1blq2 = as_factor(educ_nt1blq2),
      ltpa_index_nt1 = as_factor(ltpa_index_nt1),
      ltpa_group_nt1 = as_factor(ltpa_group_nt1),
      ltpa_index_nt3 = as_factor(ltpa_index_nt3),
      ltpa_group_nt3 = as_factor(ltpa_group_nt3),
      ltpa_index_nt4 = as_factor(ltpa_index_nt4),
      ltpa_group_nt4 = as_factor(ltpa_group_nt4),
      trajectory_group = as_factor(case_when(
        ltpa_group_nt1 == "Low" & ltpa_group_nt3 == "Low" & ltpa_group_nt4 == "Low" ~ "Below recommended, below recommended, below recommended",
        ltpa_group_nt1 == "Low" & ltpa_group_nt3 == "Low" & ltpa_group_nt4 == "Moderate/high" ~ "Below recommended, below recommended, recommended",
        ltpa_group_nt1 == "Low" & ltpa_group_nt3 == "Moderate/high" & ltpa_group_nt4 == "Moderate/high" ~ "Below recommended, recommended, recommended",
        ltpa_group_nt1 == "Moderate/high" & ltpa_group_nt3 == "Moderate/high" & ltpa_group_nt4 == "Moderate/high" ~ "Recommended, recommended, recommended",
        ltpa_group_nt1 == "Moderate/high" & ltpa_group_nt3 == "Moderate/high" & ltpa_group_nt4 == "Low" ~ "Recommended, recommended, below recommended",
        ltpa_group_nt1 == "Moderate/high" & ltpa_group_nt3 == "Low" & ltpa_group_nt4 == "Low" ~ "Recommended, below recommended, below recommended")
    ),
    trajectory_group = relevel(trajectory_group, ref = "Below recommended, below recommended, below recommended")
    ) |>
    select(
      age,
      sex,
      part_dat_nt1blq1,
      end_date_death,
      follow_up_time,
      death_all,
      bp_syst2_nt1blm,
      bmi_nt1blm,
      alc_fl2w_nt1blq2,
      smo_stat_nt1blq2,
      educ_nt1blq2,
      ltpa_index_nt1,
      ltpa_group_nt1,
      ltpa_index_nt3,
      ltpa_group_nt3,
      ltpa_index_nt4,
      ltpa_group_nt4,
      trajectory_group
    )
  return(dataframe)
}
```

Note that for this analyses, H1 is not included. Participation date, follow-up time and covariates are therefore changed accordingly.

#### H3-H4

```{r}
process_hunt_3_4 <- function(dataframe) {
  dataframe <- dataframe |> 
    mutate(
      part_dat_nt3blq1 = case_when(
      is.na(part_dat_nt3blq1) ~ as_date("1995-08-15"),
      TRUE ~ part_dat_nt3blq1
      ),
      follow_up_time = as.period(interval(part_dat_nt3blq1, end_date_death)) / years(1),
      death_all = as.numeric(death_all),
      sex = as_factor(sex),
      bp_syst_mn23_nt3blm = as_factor(bp_syst_mn23_nt3blm),
      bmi_nt3blm = as_factor(bmi_nt3blm),
      alc_fly_nt3blq1 = as_factor(alc_fly_nt3blq1),
      smo_stat_nt3blq1 = as_factor(smo_stat_nt3blq1),
      wor_tit_isco1_nt3bli = as_factor(wor_tit_isco1_nt3bli),
      ltpa_index_nt3 = as_factor(ltpa_index_nt3),
      ltpa_group_nt3 = as_factor(ltpa_group_nt3),
      ltpa_index_nt4 = as_factor(ltpa_index_nt4),
      ltpa_group_nt4 = as_factor(ltpa_group_nt4),
      trajectory_group = as_factor(case_when(
        ltpa_group_nt3 == "Low" & ltpa_group_nt4 == "Low" ~ "Below recommended, below recommended",
        ltpa_group_nt3 == "Low" & ltpa_group_nt4 == "Moderate/high" ~ "Below recommended, recommended",
        ltpa_group_nt3 == "Moderate/high" & ltpa_group_nt4 == "Low" ~ "Recommended, below recommended",
        ltpa_group_nt3 == "Moderate/high" & ltpa_group_nt4 == "Moderate/high" ~ "Recommended, recommended")
      ),
    trajectory_group = relevel(trajectory_group, ref = "Below recommended, below recommended")
  ) |>
    select(
      age,
      sex,
      part_dat_nt3blq1,
      end_date_death,
      follow_up_time,
      death_all,
      bp_syst_mn23_nt3blm,
      bmi_nt3blm,
      alc_fly_nt3blq1,
      smo_stat_nt3blq1,
      wor_tit_isco1_nt3bli,
      ltpa_index_nt3,
      ltpa_group_nt3,
      ltpa_index_nt4,
      ltpa_group_nt4,
      trajectory_group
    )
  return(dataframe)
}
```


## Regression modelling functions

### Cox regression

Cox regression function:

```{r}

run_cox_reg <- function(data, strata = NULL, time, status, covariates) {
  
  f <- paste0('Surv(', deparse(substitute(time)), ',',
                     deparse(substitute(status)), ') ~ ', 
                     paste(covariates, collapse = ' + '))
 
  data |> 
    group_by({{ strata }}) |> 
    drop_na({{ strata }}) |> 
    nest() |> 
    mutate(test_results = map(
      .x = data, 
      .f = ~ coxph(as.formula(f), data =.x) |> 
      broom::tidy(conf.int = TRUE, exponentiate = TRUE))
    ) |>  
    unnest(test_results) |> 
    select({{ strata }}, term, estimate, std.error, conf.low, conf.high) |> 
    ungroup()
}
```

## Other useful functions

### Calculating number of participants

```{r}

calculate_num_of_participants <- function(dataframes, covariates) {
  for (dataframe in dataframes) {
    print(
      get(dataframe) %>% 
        select(all_of(covariates)) %>% 
        drop_na() %>% 
        count()
    )
  }
}
```

### Calculating number of deaths

```{r}

calculate_num_of_deaths <- function(dataframes, covariates) {
  for (dataframe in dataframes) {
    print(
      get(dataframe) %>% 
        select(all_of(covariates)) %>% 
        drop_na() %>% 
        filter(death_all_cause == 2) |> # Death is coded as 2
        count()
    )
  }
}
```

### Calculating follow-up time

```{r}

calculate_person_years_follow_up <- function(dataframes, covariates) {
  
  for (dataframe in dataframes) {
    print(
      get(dataframe) |> 
        select(all_of(covariates)) %>% 
        drop_na() %>% 
        summarise(person_years = sum(follow_up_time_in_years))
    )
  }
}
```

### Calculating stratified number of participants

```{r}

calculate_num_of_participants_strat <- function(dataframes, covariates, classes, stratifier) {
  
  for (dataframe in dataframes) {
    data <- get(dataframe)
    
    for (class in classes) {
      result <- data |> 
        filter({{ stratifier }} == class) |> 
        select(all_of(covariates)) |> 
        drop_na() |> 
        count()
      print(
        paste(
          paste("Dataset:", dataframe, "class:", class, "number of participants:", result$n)
        )
      )
    }
  }
}
```

### Calculating stratified follow-up time

```{r}

calculate_person_years_follow_up_strat <- function(dataframes, covariates, classes, stratifier) {
  
  for (dataframe in dataframes) {
    data <- get(dataframe)
    
    for (class in classes) {
      result <- data |> 
        filter({{ stratifier }} == class) |>
        select(all_of(covariates)) |> 
        drop_na() |> 
        summarise(person_years = sum(follow_up_time_in_years))
      
      print(
        paste("Dataset:", dataframe, "class:", class, "person_years:", result$person_years)
      )
    }
  }
}
```

### Count number of NA's in the whole dataframe

```{r}

count_df_na <- function(dataframe) {
  map_df(dataframe, ~ sum(is.na(.x)))
}
```
