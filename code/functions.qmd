---
title: "Functions"
format: html
editor: visual
---

## Information

This script contains functions that have been used throughout the analyses for the thesis. There is no other documentation available than the respective function.

## Data processing functions

### No change in LTPA

#### HUNT 1

##### LTPA index variable

```{r}

process_hunt_1_no_change_index <- function(dataframe) {
  dataframe |> 
      rename(
      exercise_duration = exe_du_nt1blq2, 
      exercise_frequency_per_week = exe_f_nt1blq2,
      exercise_intensity = exe_int_nt1blq2,
      death_all_cause = death_all,
      participation_date = part_dat_nt1blq1,
      bp_systolic = bp_syst2_nt1blm,
      bmi = bmi_nt1blm,
      smo_status = smo_stat_nt1blq2,
      alcohol_usage = alc_fl2w_nt1blq2,
      education_level = educ_nt1blq2,
      heavy_physical_work = wor_heav_nt1blq2
    ) |> 
       mutate(
      int_index = case_when(
        exercise_intensity == "Tar det rolig uten 책 bli andpusten eller svett" ~ 1,
        exercise_intensity == "Tar det s책 hardt at jeg blir andpusten og svett" ~ 2,
        exercise_intensity == "Tar meg nesten helt ut " ~ 3,
        TRUE ~ 0
      ),
      dur_index = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 0.10,
        exercise_duration == "16-30 minutter" ~ 0.38,
        exercise_duration == "30 minutter-1 time" ~ 0.75,
        exercise_duration == "Mindre enn 15 minutter" ~ 1.0,
        TRUE ~ 0
      ),
      freq_index = case_when(
        exercise_frequency_per_week == "Aldri" ~ 0,
        exercise_frequency_per_week == "Sjeldnere enn en gang i uka" ~ 0.5,
        exercise_frequency_per_week == "En gang i uka" ~ 1,
        exercise_frequency_per_week == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency_per_week == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      ltpa_index = int_index * dur_index * freq_index,
      follow_up_time_in_years = as.period(interval(participation_date, end_date_death)) / years(1),
      death_all_cause = as.numeric(death_all_cause) # Surv() input needs to be numeric
       ) |> 
  select(
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      ltpa_index,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      education_level,
      heavy_physical_work
  )
}
```

##### Quasi-continous PA variable (min/week)

```{r}

process_hunt_1_no_change_cont_var <- function(dataframe) {
  dataframe |> 
    rename(
      exercise_duration = exe_du_nt1blq2, 
      exercise_frequency_per_week = exe_f_nt1blq2,
      death_all_cause = death_all,
      participation_date = part_dat_nt1blq1,
      bp_systolic = bp_syst2_nt1blm,
      bmi = bmi_nt1blm,
      smo_status = smo_stat_nt1blq2,
      alcohol_usage = alc_fl2w_nt1blq2,
      education_level = educ_nt1blq2,
      heavy_physical_work = wor_heav_nt1blq2
    ) |>   
    mutate(
      minutes_duration_each_exercise_bout = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 7.5,
        exercise_duration == "16-30 minutter" ~ 22.5,
        exercise_duration == "30 minutter-1 time" ~ 45,
        exercise_duration == "Mer enn 1 time" ~ 75,
        TRUE ~ 0
      ),
      exercise_frequency_per_week = case_when(
        exercise_frequency_per_week == "En gang i uka" ~ 1,
        exercise_frequency_per_week == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency_per_week == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      participation_date = case_when(
        is.na(participation_date) ~ as_date("1984-02-15"),
        TRUE ~ participation_date
      ),
      pa_min_per_week = minutes_duration_each_exercise_bout * exercise_frequency_per_week,
      follow_up_time_in_years = as.period(interval(participation_date, end_date_death)) / years(1),
      death_all_cause = as.numeric(death_all_cause) # Surv() input needs to be numeric
    ) |>
    select(
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      exercise_duration,
      minutes_duration_each_exercise_bout,
      exercise_frequency_per_week,
      pa_min_per_week,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      education_level,
      heavy_physical_work
    )
}
```

#### HUNT 2

##### Quasi-continous PA variable

```{r}

process_hunt_2_no_change_cont_var <- function(dataframe) {
  dataframe |> 
    rename(
      exercise_time_per_week_high_int = exe_har_du_ly_nt2blq1,
      exercise_time_per_week_low_int = exe_lig_du_ly_nt2blq1,
      participation_date = part_dat_nt2blq1,
      death_all_cause = death_all,
      smo_status = smo_stat_nt2blq1,
      bp_systolic = bp_syst_mn23_nt2blm,
      bmi = bmi_nt2blm,
      alcohol_usage = alc_tot_unit_w_nt2blq1,
      education_level = educ_nt2blq1,
      heavy_physical_work = wor_heav_nt2blq2,
    ) |> 
    mutate(
      participation_date = case_when(
        is.na(participation_date) ~ as_date("1995-08-15"),
        TRUE ~ participation_date
        ),
      exercise_time_per_week_low_int = case_when(
       exercise_time_per_week_low_int == "Ingen" ~ 0,
       exercise_time_per_week_low_int == "Under 1 time" ~ 30,
       exercise_time_per_week_low_int == "1-2 timer" ~ 90,
       exercise_time_per_week_low_int == "3 timer eller mer" ~ 210,
       TRUE ~ 0),
      exercise_time_per_week_high_int = case_when(
       exercise_time_per_week_high_int == "Ingen" ~ 0,
       exercise_time_per_week_high_int == "Under 1 time" ~ 30,
       exercise_time_per_week_high_int == "1-2 timer" ~ 90,
       exercise_time_per_week_high_int == "3 timer eller mer" ~ 210,
       TRUE ~ 0),
      pa_min_per_week = exercise_time_per_week_low_int + exercise_time_per_week_high_int,
      follow_up_time_in_years = as.period(interval(participation_date, end_date_death)) / years(1),
      death_all_cause = as.numeric(death_all_cause)
    ) |> 
    select(
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      exercise_time_per_week_low_int,
      exercise_time_per_week_high_int,
      pa_min_per_week,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      education_level,
      heavy_physical_work
    )
}
```

#### HUNT 3

##### LTPA index variable

```{r}

process_hunt_3_no_change_index <- function(dataframe) {
  dataframe |> 
    rename(
      exercise_duration = exe_du_nt3blq1,
      exercise_frequency_per_week = exe_f_nt3blq1,
      exercise_intensity = exe_int_nt3blq1,
      participation_date = part_dat_nt3blq1,
      death_all_cause = death_all,
      bp_systolic = bp_syst_mn23_nt3blm,
      bmi = bmi_nt3blm,
      smo_status = smo_stat_nt3blq1,
      alcohol_usage = alc_tot_unit_w_nt3blq1,
      occupational_type = wor_tit_isco1_nt3bli,
      heavy_physical_work = wor_heav_nt3blq2
    ) |> 
    mutate(
      participation_date = case_when(
        is.na(participation_date) ~ as_date("2006-10-15"),
        TRUE ~ participation_date
      ),
      int_index = case_when(
        exercise_intensity == "Tar det rolig uten 책 bli andpusten eller svett" ~ 1,
        exercise_intensity == "Tar det s책 hardt at jeg blir andpusten og svett" ~ 2,
        exercise_intensity == "Tar meg nesten helt ut" ~ 3,
        TRUE ~ 0
      ),
      dur_index = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 0.10,
        exercise_duration == "15-29 minutter" ~ 0.38,
        exercise_duration == "30 minutter - 1 time" ~ 0.75,
        exercise_duration == "Mer enn 1 time" ~ 1.0,
        TRUE ~ 0
      ),
      freq_index = case_when(
        exercise_frequency_per_week == "Aldri" ~ 0,
        exercise_frequency_per_week == "Sjeldnere enn en gang i uka" ~ 0.5,
        exercise_frequency_per_week == "En gang i uka" ~ 1,
        exercise_frequency_per_week == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency_per_week == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      ltpa_index = int_index * dur_index * freq_index,
      follow_up_time_in_years = as.period(interval(participation_date, end_date_death)) / years(1),
      death_all_cause = as.numeric(death_all_cause)
    ) |> 
    select(
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      exercise_intensity,
      exercise_frequency_per_week,
      exercise_duration,
      ltpa_index,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      occupational_type,
      heavy_physical_work
    )
}
```

##### Quasi-continuous PA variable

```{r}

process_hunt_3_no_change_cont_var <- function(dataframe) {
  dataframe |> 
    rename(
      exercise_duration = exe_du_nt3blq1,
      exercise_frequency_per_week = exe_f_nt3blq1,
      participation_date = part_dat_nt3blq1,
      death_all_cause = death_all,
      bp_systolic = bp_syst_mn23_nt3blm,
      bmi = bmi_nt3blm,
      smo_status = smo_stat_nt3blq1,
      alcohol_usage = alc_tot_unit_w_nt3blq1,
      occupational_type = wor_tit_isco1_nt3bli,
      heavy_physical_work = wor_heav_nt3blq2
    ) |> 
    mutate(
      minutes_duration_each_exercise_bout = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 7.5,
        exercise_duration == "15-29 minutter" ~ 22.5,
        exercise_duration == "30 minutter - 1 time" ~ 45,
        exercise_duration == "Mer enn 1 time" ~ 75,
        TRUE ~ 0
      ),
      exercise_frequency_per_week = case_when(
        exercise_frequency_per_week == "En gang i uka" ~ 1,
        exercise_frequency_per_week == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency_per_week == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      participation_date = case_when(
        is.na(participation_date) ~ as_date("2006-10-15"),
        TRUE ~ participation_date
      ),
      pa_min_per_week = minutes_duration_each_exercise_bout * exercise_frequency_per_week,
      follow_up_time_in_years = as.period(interval(participation_date, end_date_death)) / years(1),
      death_all_cause = as.numeric(death_all_cause)
    ) |> 
    select(
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      minutes_duration_each_exercise_bout,
      exercise_frequency_per_week,
      pa_min_per_week,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      occupational_type,
      heavy_physical_work
    )
}
```

#### HUNT 4

##### LTPA index variable

```{r}

process_hunt_4_no_change_ltpa_index <- function(dataframe) {
  dataframe |> 
    rename(
      exercise_duration = exe_du_nt4blq1,
      exercise_frequency_per_week = exe_f_nt4blq1,
      exercise_intensity = exe_int_nt4blq1,
      death_all_cause = death_all,
      participation_date = part_dat_nt4blq1,
      bp_systolic = bp_syst_mn23_nt4blm,
      bmi = bmi_nt4blm,
      smo_status = smo_stat_nt4blq1,
      alcohol_usage = alc_tot_unit_w_nt4blq1,
      educational_level = educ_nt4blq1,
      heavy_physical_work = wor_heav_nt4blq2
    ) |>
    mutate(
      int_index = case_when(
        exercise_intensity == "Tar det rolig uten 책 bli andpusten eller svett" ~ 1,
        exercise_intensity == "Tar det s책 hardt at jeg blir andpusten eller svett" ~ 2,
        exercise_intensity == "Tar meg nesten helt ut" ~ 3,
        TRUE ~ 0
      ),
      dur_index = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 0.10,
        exercise_duration == "15-29 minutter" ~ 0.38,
        exercise_duration == "30-60 minutter" ~ 0.75,
        exercise_duration == "Mer enn 60 minutter" ~ 1.0,
        TRUE ~ 0
      ),
      freq_index = case_when(
        exercise_frequency_per_week == "Aldri" ~ 0,
        exercise_frequency_per_week == "Sjeldnere enn en gang i uka" ~ 0.5,
        exercise_frequency_per_week == "En gang i uka" ~ 1,
        exercise_frequency_per_week == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency_per_week == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      ltpa_index = int_index * dur_index * freq_index,
      participation_date = case_when(
        is.na(participation_date) ~ as_date("2017-05-15"),
        TRUE ~ participation_date
      ),
      follow_up_time_in_years = as.period(interval(participation_date, end_date_death)) / years(1),
      death_all_cause = as.numeric(death_all_cause)
    ) |> 
    select(
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      exercise_intensity,
      exercise_frequency_per_week,
      exercise_duration,
      ltpa_index,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      educational_level,
      heavy_physical_work
    )
}
```

#### Quasi-continous PA variable

```{r}

process_hunt_4_no_change_cont_var <- function(dataframe) {
  dataframe |>
    rename(
      exercise_duration = exe_du_nt4blq1,
      exercise_frequency_per_week = exe_f_nt4blq1,
      death_all_cause = death_all,
      participation_date = part_dat_nt4blq1,
      bp_systolic = bp_syst_mn23_nt4blm,
      bmi = bmi_nt4blm,
      smo_status = smo_stat_nt4blq1,
      alcohol_usage = alc_tot_unit_w_nt4blq1,
      educational_level = educ_nt4blq1,
      heavy_physical_work = wor_heav_nt4blq2
    ) |>
    mutate(
      minutes_duration_each_exercise_bout = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 7.5,
        exercise_duration == "15-29 minutter" ~ 22.5,
        exercise_duration == "30-60 minutter" ~ 45,
        exercise_duration == "Mer enn 60 minutter" ~ 75,
        TRUE ~ 0
      ),
      exercise_frequency_per_week = case_when(
        exercise_frequency_per_week == "En gang i uka" ~ 1,
        exercise_frequency_per_week == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency_per_week == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      participation_date = case_when(
        is.na(participation_date) ~ as_date("2017-05-15"),
        TRUE ~ participation_date
      ),
      pa_min_per_week = minutes_duration_each_exercise_bout * exercise_frequency_per_week,
      follow_up_time_in_years = as.period(interval(participation_date, end_date_death)) / years(1),
      death_all_cause = as.numeric(death_all_cause)
    ) |> 
    select(
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      minutes_duration_each_exercise_bout,
      exercise_frequency_per_week,
      pa_min_per_week,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      educational_level,
      heavy_physical_work
    )
}
```

### Change in LTPA

#### HUNT 1

```{r}

process_hunt_1_change <- function(dataframe) {
  dataframe |> 
    
    # Select all variables of interest, also those for creating socioeconomic and occupational PA classes
    
    select(contains(match = "nt1"), age, sex, death_all, end_date_death, w22_0389_lopenr_person) |> 
    
    # Rename HUNT 1 variables
    
    rename(
      exercise_duration = exe_du_nt1blq2, 
      exercise_frequency = exe_f_nt1blq2,
      death_all_cause = death_all,
      participation_date = part_dat_nt1blq1,
      bp_systolic = bp_syst2_nt1blm,
      bmi = bmi_nt1blm,
      smo_status = smo_stat_nt1blq2,
      alcohol_usage = alc_fl2w_nt1blq2,
      education_level = educ_nt1blq2,
      heavy_physical_work = wor_heav_nt1blq2
    ) |> 
    
      # Mutate HUNT 1 variables
    
    mutate(
      minutes_duration_each_exercise_bout = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 7.5,
        exercise_duration == "16-30 minutter" ~ 22.5,
        exercise_duration == "30 minutter-1 time" ~ 45,
        exercise_duration == "Mer enn 1 time" ~ 75,
        TRUE ~ 0
      ),
      exercise_frequency_per_week = case_when(
        exercise_frequency == "En gang i uka" ~ 1,
        exercise_frequency == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
       participation_date = case_when(
        is.na(participation_date) ~ as_date("1984-02-15"),
        TRUE ~ participation_date
      ),
      pa_hrs_per_week = (minutes_duration_each_exercise_bout * exercise_frequency_per_week) / 60,
      follow_up_time_in_years = round(as.numeric(interval(participation_date, end_date_death) / dyears(1)), 1),
      death_all_cause = as.numeric(death_all_cause) # Surv() input needs to be numeric
    ) |>
    
    # Get columns in a logical order for readability
    
    select(
      w22_0389_lopenr_person,
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      exercise_duration,
      exercise_frequency,
      minutes_duration_each_exercise_bout,
      exercise_frequency_per_week,
      pa_hrs_per_week,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      education_level,
      heavy_physical_work
    )
}
```


#### HUNT 2

```{r}

process_hunt_2_change <- function(dataframe) {
  
  dataframe |> 
    
    # Select relevant variables
    
    select(contains(match = "nt2"), age, sex, end_date_death,
           w22_0389_lopenr_person
           ) |>
    
    # HUNT 2 renaming of variables
    
    rename(
      exercise_time_per_week_h2 = exe_lig_du_ly_nt2blq1,
      participation_date_h2 = part_dat_nt2blq1,
      packs_of_smoke_per_year_h2 = smo_pack_yrs_x_nt2blq1,
      bp_systolic_h2 = bp_syst_mn23_nt2blm,
      bp_diastolic_h2 = bp_dias_mn23_nt2blm,
      bmi_h2 = bmi_nt2blm,
      alcohol_usage = alc_tot_unit_w_nt2blq1,
      heart_infarction = car_inf_ev_nt2blq1
    ) |> 
    
    drop_na( # To be able to use these variables inside the coming mutate function
      exercise_time_per_week_h2, age, death_all_cause,
      sex, participation_date_h2
    ) |> 
    
    # HUNT 2 mutating variables
    
    mutate(
      pa_hrs_per_week_h2 = case_when(
        exercise_time_per_week_h2 == "Ingen" ~ 0,
        exercise_time_per_week_h2 == "Under 1 time" ~ 0.5,
        exercise_time_per_week_h2 == "1-2 timer" ~ 1.5,
        exercise_time_per_week_h2 == "3 timer eller mer" ~ 3.5
      ),
      participation_date = case_when(
       is.na(participation_date) ~ as_date("1995-08-15"),
       TRUE ~ participation_date
     ),
      follow_up_time_in_years_h2 = round(as.numeric(interval(participation_date_h2, end_date_death) / dyears(1)), 1),
      packs_of_smoke_per_year_h2 = ifelse(is.na(packs_of_smoke_per_year_h2), 0, packs_of_smoke_per_year_h2),
      death_all_cause = as.numeric(death_all_cause)
    )
}
```


#### HUNT 3

```{r}

process_hunt_3_change <- function(dataframe) {
  dataframe |> 
    
    # Select relevant variables
    
    select(contains(match = "nt3"), age, sex, death_all, end_date_death,
           w22_0389_lopenr_person
           ) |>
    
    # Rename HUNT 3 variables
    
    rename(
      exercise_duration = exe_du_nt3blq1,
      exercise_frequency = exe_f_nt3blq1,
      participation_date = part_dat_nt3blq1,
      death_all_cause = death_all,
      bp_systolic = bp_syst_mn23_nt3blm,
      bmi = bmi_nt3blm,
      smo_status = smo_stat_nt3blq1,
      alcohol_usage = alc_tot_unit_w_nt3blq1,
      occupational_type = wor_tit_isco1_nt3bli, # Socioeconomic class proxy variable is different in HUNT 3
      heavy_physical_work = wor_heav_nt3blq2
    ) |> 
    
    # Mutate HUNT 3 variables
    
    mutate(
      minutes_duration_each_exercise_bout = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 7.5,
        exercise_duration == "15-29 minutter" ~ 22.5,
        exercise_duration == "30 minutter - 1 time" ~ 45,
        exercise_duration == "Mer enn 1 time" ~ 75,
        TRUE ~ 0
      ),
      exercise_frequency_per_week = case_when(
        exercise_frequency == "En gang i uka" ~ 1,
        exercise_frequency == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      participation_date = case_when(
        is.na(participation_date) ~ as_date("2006-10-15"),
        TRUE ~ participation_date
      ),
      pa_hrs_per_week = (minutes_duration_each_exercise_bout * exercise_frequency_per_week) / 60,
      follow_up_time_in_years = round(as.numeric(interval(participation_date, end_date_death) / dyears(1)), 1),
      death_all_cause = as.numeric(death_all_cause)
    ) |> 
    
    # Get columns in a logical order for readability
    
    select(
      w22_0389_lopenr_person,
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      exercise_duration,
      exercise_frequency,
      minutes_duration_each_exercise_bout,
      exercise_frequency_per_week,
      pa_hrs_per_week,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      occupational_type,
      heavy_physical_work
    )
}
```

#### HUNT 4

```{r}

process_hunt_4_change <- function(dataframe) {
  dataframe |> 
    
    # Select relevant variables
    
    select(contains(match = "nt4"), age, sex, death_all, end_date_death,
           w22_0389_lopenr_person
           ) |> 
    
    # Rename HUNT 4 variables
    
    rename(
      exercise_duration = exe_du_nt4blq1,
      exercise_frequency = exe_f_nt4blq1,
      death_all_cause = death_all,
      participation_date = part_dat_nt4blq1,
      bp_systolic = bp_syst_mn23_nt4blm,
      bmi = bmi_nt4blm,
      smo_status = smo_stat_nt4blq1,
      alcohol_usage = alc_tot_unit_w_nt4blq1,
      educational_level = educ_nt4blq1,
      heavy_physical_work = wor_heav_nt4blq2
    ) |>
    
    # Mutate HUNT 4 variables
    
    mutate(
      minutes_duration_each_exercise_bout = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 7.5,
        exercise_duration == "15-29 minutter" ~ 22.5,
        exercise_duration == "30-60 minutter" ~ 45,
        exercise_duration == "Mer enn 60 minutter" ~ 75,
        TRUE ~ 0
      ),
      exercise_frequency_per_week = case_when(
        exercise_frequency == "En gang i uka" ~ 1,
        exercise_frequency == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      participation_date = case_when(
        is.na(participation_date) ~ as_date("2017-05-15"),
        TRUE ~ participation_date
      ),
      pa_hrs_per_week = (minutes_duration_each_exercise_bout * exercise_frequency_per_week) / 60,
      follow_up_time_in_years = round(as.numeric(interval(participation_date, end_date_death) / dyears(1)), 1),
      death_all_cause = as.numeric(death_all_cause)
    ) |> 
    
    # Get columns in a logical order for readability
    
    select(
      w22_0389_lopenr_person,
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      exercise_duration,
      exercise_frequency,
      minutes_duration_each_exercise_bout,
      exercise_frequency_per_week,
      pa_hrs_per_week,
      bp_systolic,
      bmi,
      alcohol_usage,
      smo_status,
      educational_level,
      heavy_physical_work
    )
}
```

#### LTPA index dataframes

There are separate functions for these because intensity has to be included

##### HUNT 1

```{r}

process_hunt_1_change_ltpa <- function(dataframe) {
  dataframe |> 
    
    # Select all variables of interest, also those for creating socioeconomic and occupational PA classes
    
    select(contains(match = "nt1"), age, sex, death_all, end_date_death, w22_0389_lopenr_person) |> 
    
    # Rename HUNT 1 variables
    
    rename(
      death_all_cause = death_all,
      participation_date = part_dat_nt1blq1,
      exercise_intensity = exe_int_nt1blq2,
      exercise_duration = exe_du_nt1blq2,
      exercise_frequency = exe_f_nt1blq2,
      education_level = educ_nt1blq2
      
    ) |> 
    
      # Mutate HUNT 1 variables
    
    mutate(
      int_index = case_when(
        exercise_intensity == "Tar det rolig uten 책 bli andpusten eller svett" ~ 1,
        exercise_intensity == "Tar det s책 hardt at jeg blir andpusten og svett" ~ 2,
        exercise_intensity == "Tar meg nesten helt ut " ~ 3,
        TRUE ~ 0
      ),
      dur_index = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 0.10,
        exercise_duration == "16-30 minutter" ~ 0.38,
        exercise_duration == "30 minutter-1 time" ~ 0.75,
        exercise_duration == "Mindre enn 15 minutter" ~ 1.0,
        TRUE ~ 0
      ),
      freq_index = case_when(
        exercise_frequency == "Aldri" ~ 0,
        exercise_frequency == "Sjeldnere enn en gang i uka" ~ 0.5,
        exercise_frequency == "En gang i uka" ~ 1,
        exercise_frequency == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      ltpa_index_h1 = int_index * dur_index * freq_index,
       participation_date = case_when(
        is.na(participation_date) ~ as_date("1984-02-15"),
        TRUE ~ participation_date
      ),
      follow_up_time_in_years = round(as.numeric(interval(participation_date, end_date_death) / dyears(1)), 1),
      death_all_cause = as.numeric(death_all_cause) # Surv() input needs to be numeric
    ) |>
    
    # Get columns in a logical order for readability
    
    select(
      w22_0389_lopenr_person,
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      exercise_intensity,
      exercise_duration,
      exercise_frequency,
      ltpa_index,
      education_level,
    )
}
```


##### HUNT 3

```{r}

process_hunt_3_change_ltpa <- function(dataframe) {
  dataframe |> 
    
    # Select relevant variables
    
    select(contains(match = "nt3"), age, sex, death_all, end_date_death, w22_0389_lopenr_person) |>
    
    # Rename HUNT 3 variables
    
    rename(
      exercise_intensity = exe_int_nt3blq1,
      exercise_duration = exe_du_nt3blq1,
      exercise_frequency = exe_f_nt3blq1,
      participation_date = part_dat_nt3blq1,
      death_all_cause = death_all,
      occupational_type = wor_tit_isco1_nt3bli # Socioeconomic class proxy variable is different in HUNT 3
    ) |> 
    
    # Mutate HUNT 3 variables
    
    mutate(
      int_index = case_when(
        exercise_intensity == "Tar det rolig uten 책 bli andpusten eller svett" ~ 1,
        exercise_intensity == "Tar det s책 hardt at jeg blir andpusten og svett" ~ 2,
        exercise_intensity == "Tar meg nesten helt ut " ~ 3,
        TRUE ~ 0
      ),
      dur_index = case_when(
        exercise_duration == "Mindre enn 15 minutter" ~ 0.10,
        exercise_duration == "15-29 minutter" ~ 0.38,
        exercise_duration == "30 minutter - 1 time" ~ 0.75,
        exercise_duration == "Mer enn 1 time" ~ 1.0,
        TRUE ~ 0
      ),
      freq_index = case_when(
        exercise_frequency == "Aldri" ~ 0,
        exercise_frequency == "Sjeldnere enn en gang i uka" ~ 0.5,
        exercise_frequency == "En gang i uka" ~ 1,
        exercise_frequency == "2-3 ganger i uka" ~ 2.5,
        exercise_frequency == "Omtrent hver dag" ~ 5,
        TRUE ~ 0
      ),
      ltpa_index = int_index * dur_index * freq_index,
      participation_date = case_when(
        is.na(participation_date) ~ as_date("2006-10-15"),
        TRUE ~ participation_date
      ),
      follow_up_time_in_years = round(as.numeric(interval(participation_date, end_date_death) / dyears(1)), 1),
      death_all_cause = as.numeric(death_all_cause)
    ) |> 
    
    # Get columns in a logical order for readability
    
    select(
      w22_0389_lopenr_person,
      age,
      sex,
      participation_date,
      end_date_death,
      follow_up_time_in_years,
      death_all_cause,
      exercise_intensity,
      exercise_duration,
      exercise_frequency,
      ltpa_index,
      occupational_type,
    )
}
```


##### HUNT 4

## Regression modelling functions

### Cox regression

```{r}

run_cox_reg <- function(data, strata = NULL, time, status, covariates) {
  
  f <- paste0('Surv(', deparse(substitute(time)), ',',
                     deparse(substitute(status)), ') ~ ', 
                     paste(covariates, collapse = ' + '))
 
  data |> 
    group_by({{ strata }}) |> 
    drop_na({{ strata }}) |> 
    nest() |> 
    mutate(test_results = map(
      .x = data, 
      .f = ~ coxph(as.formula(f), data =.x) |> 
      broom::tidy(conf.int = TRUE, exponentiate = TRUE))
    ) |>  
    unnest(test_results) |> 
    select({{ strata }}, term, estimate, std.error, conf.low, conf.high) |> 
    ungroup()
}
```


#### Crude Cox regression

```{r}

run_cox_reg_crude <- function(dataframe, strata, pa_var) {
  
  result <- dataframe |> 
    group_by({{ strata }}) |> 
    drop_na({{ strata }} ) |> 
    nest() |> 
    mutate(test_results = map(
      .x = data, 
      .f = ~ coxph(Surv(follow_up_time_in_years, death_all_cause) ~ !!sym(pa_var) + age, data =.x) |> 
        broom::tidy(conf.int = TRUE, exponentiate = TRUE))
    ) |> 
    unnest(test_results) |>  
    select({{ strata }}, term, estimate, std.error, conf.low, conf.high) |> 
    ungroup()
  
  return(result)
}
```

#### Multi-adjusted Cox regression

```{r}


run_cox_reg_multi <- function(dataframe, strata, pa_var) {
  
  result <- dataframe |> 
    group_by({{ strata }}) |> 
    drop_na({{ strata }}) |> 
    nest() |> 
    mutate(test_results = map(.x = data, 
                              .f = ~ coxph(Surv(follow_up_time_in_years, death_all_cause) ~ !!sym(pa_var) + 
                                             bp_systolic + bmi + smo_status + age + alcohol_usage + sex, 
                                           data =.x) |> 
                                broom::tidy(conf.int = TRUE, exponentiate = TRUE))
           
    ) |> 
    unnest(test_results) |> 
    select({{ strata }}, term, estimate, std.error, conf.low, conf.high) |> 
    ungroup()
  
  return(result)
}
```

## Other useful functions

### Calculating number of participants

```{r}

calculate_num_of_participants <- function(dataframes, covariates) {
  for (dataframe in dataframes) {
    print(
      get(dataframe) %>% 
        select(all_of(covariates)) %>% 
        drop_na() %>% 
        count()
    )
  }
}
```

### Calculating number of deaths

```{r}

calculate_num_of_deaths <- function(dataframes, covariates) {
  for (dataframe in dataframes) {
    print(
      get(dataframe) %>% 
        select(all_of(covariates)) %>% 
        drop_na() %>% 
        filter(death_all_cause == 2) |> # Death is coded as 2
        count()
    )
  }
}
```

### Calculating follow-up time

```{r}

calculate_person_years_follow_up <- function(dataframes, covariates) {
  
  for (dataframe in dataframes) {
    print(
      get(dataframe) |> 
        select(all_of(covariates)) %>% 
        drop_na() %>% 
        summarise(person_years = sum(follow_up_time_in_years))
    )
  }
}
```

### Calculating stratified number of participants

```{r}

calculate_num_of_participants_strat <- function(dataframes, covariates, classes, stratifier) {
  
  for (dataframe in dataframes) {
    data <- get(dataframe)
    
    for (class in classes) {
      result <- data |> 
        filter({{ stratifier }} == class) |> 
        select(all_of(covariates)) |> 
        drop_na() |> 
        count()
      print(
        paste(
          paste("Dataset:", dataframe, "class:", class, "number of participants:", result$n)
        )
      )
    }
  }
}
```

### Calculating stratified follow-up time

```{r}

calculate_person_years_follow_up_strat <- function(dataframes, covariates, classes, stratifier) {
  
  for (dataframe in dataframes) {
    data <- get(dataframe)
    
    for (class in classes) {
      result <- data |> 
        filter({{ stratifier }} == class) |>
        select(all_of(covariates)) |> 
        drop_na() |> 
        summarise(person_years = sum(follow_up_time_in_years))
      
      print(
        paste("Dataset:", dataframe, "class:", class, "person_years:", result$person_years)
      )
    }
  }
}
```

### Count number of NA's in the whole dataframe

```{r}

count_df_na <- function(dataframe) {
  map_df(dataframe, ~ sum(is.na(.x)))
}
```

